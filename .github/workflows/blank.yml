name: CICD

on:
  push:
    branches: main

jobs:
  build-and-deploy:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
          IMAGE_TAG: latest
        run: |
          echo "ECR_REPO_URL: $ECR_REPO_URL"
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker build -t $ECR_REPO_URL:$IMAGE_TAG -f /app .
          docker push $ECR_REPO_URL:$IMAGE_TAG
          echo "image=$ECR_REPO_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nodejs-app-task-definition.json 
          container-name: nodejs-app
          image: ${{ steps.build-image.outputs.image }}  
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: nodejs-service
          cluster: nodeapp-cluster
          wait-for-service-stability: true    
